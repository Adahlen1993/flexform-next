generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(uuid())
  email              String                @unique
  username           String                @unique
  password           String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  isAdmin            Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  workouts           Workout[]
  weightLogs         WeightLog[]
  preferences        UserPreferences?
  excludedExercises  UserExcludedExercise[]
}



model UserPreferences {
  id              String   @id @default(uuid())
  userId          String   @unique
  weightUnit      String   @default("lbs")
  defaultSets     Int      @default(3)
  promptFrequency Int      @default(1)
  preferredSplit  String?
  enableWarmups   Boolean  @default(true)
  enableCooldowns Boolean  @default(true)
  remindersOn     Boolean  @default(false)
  allowAISuggests Boolean  @default(false)

  user            User     @relation(fields: [userId], references: [id])
}

model WeightLog {
  id        String   @id @default(uuid())
  userId    String
  weight    Float
  loggedAt  DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Workout {
  id         String             @id @default(uuid())
  userId     String
  date       DateTime
  note       String?

  user       User               @relation(fields: [userId], references: [id])
  exercises  WorkoutExercise[]
}

model WorkoutExercise {
  id         String   @id @default(uuid())
  workoutId  String
  name       String
  sets       Set[]

  workout    Workout  @relation(fields: [workoutId], references: [id])
}

model Set {
  id                String   @id @default(uuid())
  workoutExerciseId String
  reps              Int
  weight            Float

  exercise          WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])
}

model Exercise {
  id    String   @id @default(uuid())
  name  String   @unique

  exerciseTags ExerciseOnTag[]
  excludedBy   UserExcludedExercise[]
}


model ExerciseTag {
  id    String   @id @default(uuid())
  name  String   @unique

  tagExercises ExerciseOnTag[]
}


model ExerciseOnTag {
  exerciseId String
  tagId      String

  exercise   Exercise   @relation(fields: [exerciseId], references: [id])
  tag        ExerciseTag @relation(fields: [tagId], references: [id])

  @@id([exerciseId, tagId])
}

model UserExcludedExercise {
  id         String   @id @default(uuid())
  userId     String
  exerciseId String

  user       User     @relation(fields: [userId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}
